{{- range $key, $value := .Values.epicsConfiguration.services }}
{{- if or ( not $value.disable) ( eq $value.disable false) }}

# Service {{$key}}
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{$.Values.beamline}}-{{ $key }}-service
  namespace: argocd
  labels:
    rootapp: {{ $.Chart.Name }}
    rootappver: {{ $.Chart.Version }}
    beamline: {{ $.Values.beamline | quote }}
    revision: {{$.Values.targetRevision}}
    service: {{ $key}}
spec:
  project: default
  source:
    repoURL: {{ $value.charturl }} 
    {{- if $value.chart}}
    chart: {{$value.chart}}
    {{- else}}
    path: .
    {{- end}}
    {{- if $value.targetRevision }}
    targetRevision: {{$value.targetRevision}}
    {{- else }}
    targetRevision: {{$.Values.targetRevision}}
    {{- end }}
    helm:
      releaseName: {{ $key }}
      values: |
          {{- if $value.nfsMounts }}
          nfsMounts:
          {{- toYaml $value.nfsMounts | nindent 10 }}
          {{- else }}
          {{- if $.Values.nfsMounts }}
          nfsMounts:
          {{- toYaml $.Values.nfsMounts | nindent 10 }}
          {{- end}}
          {{- end}}
          {{- toYaml . | nindent 10 }}
          {{- if and $.Values.baseIp $value.staticIp}}
          baseIp: "{{$.Values.baseIp}}"
          startIp: {{$.Values.startIp}}
          ipRange: {{$.Values.ipRange}}
          {{- end }}

          {{- if and (not $.Values.gitRepoConfig) (or $value.gitinit $value.gitpath) }}
          gitRepoConfig:
            url: {{$.Values.giturl}}
            {{- if $value.gitpath }}
            path: {{ $value.gitpath }}
            {{- else }}
            path: config/services/{{$key}}
            {{- end }}
            {{- if $value.gitrev }}
            branch: {{$value.gitrev}}
            {{- else }}
            branch: {{$.Values.gitrev}}
            {{- end }}
            {{- if $value.exec }}
            exec: {{$value.exec}}
            {{- end }}  
          {{- end }}
          {{- if $.Values.serviceAccountName }}
          serviceAccount:
            create: false
            annotations: {}
            name: {{$.Values.serviceAccountName}}
          {{- end }}

          {{- if $value.enable_ingress }}
          ingress:
            enabled: true
            {{- if $.Values.ingressClassName }}
            className: {{$.Values.ingressClassName}}
            {{- end }}
            hosts:
              - host: {{ printf "%s-%s.%s" $.Values.beamline $key $.Values.epik8namespace }}
                paths:
                  - path: /
                    pathType: Prefix
          {{- end}}
          {{- if not $value.resources }}
          resources:
            limits:
              cpu: 999m
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 100Mi
          {{- end }}
          {{- if $value.auto_security }}
          securityContext:
            {{- if or $.Values.openshift $value.privileged }}
            privileged: true
            {{- end }}
            runAsUser: 1000
            runAsGroup: 1000
          {{- end }}
          {{- if $.Values.epicsConfiguration.name }}
          epicsConfiguration:
            name: {{ $.Values.epicsConfiguration.name | quote}}
            {{- if $value.usegateway }}
            gateway: gateway.{{ $.Values.namespace }}
            {{- end }}
          {{- end }}
          {{- if $.Values.backend }}
          {{- if and $.Values.backend.mongo $value.mongodb}}
          mongo:
            host: {{ $.Values.backend.mongo.host }}.{{ $.Values.backend.namespace}}
            database: {{$value.mongodb}}
            port: {{ $.Values.backend.mongo.port}}
          {{- end }}
          {{- if $.Values.backend.elasticsearch}}
          elasticsearch:
            network:
              {{- if and $.Values.backend.elasticsearch.host $.Values.backend.elasticsearch.port}}
              host: {{$.Values.backend.elasticsearch.host}}.{{ $.Values.backend.namespace}}
              port: {{ $.Values.backend.elasticsearch.port}}
              {{- end }}
          {{- end }}
          {{- if $.Values.backend.kafka}}
          {{- if and $.Values.backend.kafka.host $.Values.backend.kafka.port}}
          kafka:
              host: {{$.Values.backend.kafka.host}}.{{ $.Values.backend.namespace}}
              port: {{ $.Values.backend.kafka.port}}

              {{- end }}
          {{- end }}
          {{- end }}
          


          

      parameters:
        - name: beamline
          value: {{ $.Values.beamline | quote }}
       
        {{- if $value.loadbalancer }}
        - name: service.type
          value: "LoadBalancer"
        - name: service.loadBalancerIP
          value: {{$value.loadbalancer}}
        {{- end }}
        {{- if $value.nodePort }}
        - name: service.type
          value: "NodePort"
        - name: service.nodePort
          value: "{{$value.nodePort}}"
        {{- end }}
    
        {{- if $value.mysql }}
        - name: mysql.host
          value: {{$value.mysql.host}}
        {{- end }}
    
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: {{ $.Values.namespace | quote }}
  {{- if $value.autosync }}
  syncPolicy:
    automated:
      prune: true  # Optional: Automatically remove resources not specified in Helm chart
      selfHeal: true
  {{- end }}
  info: 
  {{- if $value.info }}
    - name: message
      value: "{{ $value.info }}"
  {{- end }}
  {{- if .asset }}
    - name: asset
      value: "{{ $value.asset }}"
  {{- end }}

## END {{$key}} 
{{- else }}
## not deplyed {{ $key }}
{{- end }}

---
{{- end }}
