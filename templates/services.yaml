{{- range $key, $value := .Values.epicsConfiguration.services }}
# Service {{$key}} {{$value.name}}
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{ $value.name }}
  namespace: argocd
  labels:
    rootapp: {{ $.Chart.Name }}
    rootappver: {{ $.Chart.Version }}
    beamline: {{ $.Values.beamline | quote }}
    revision: {{$.Values.targetRevision}}
    service: {{ $key}}
spec:
  project: default
  source:
    repoURL: {{ $value.charturl }} 
    {{- if $value.chart}}
    chart: {{$value.chart}}
    {{- else}}
    path: .
    {{- end}}
    {{- if $value.targetRevision }}
    targetRevision: {{$value.targetRevision}}
    {{- else }}
    targetRevision: {{$.Values.targetRevision}}
    {{- end }}
    helm:
      values: |
          {{- toYaml . | nindent 10 }}

          {{- if $value.enable_ingress }}
          ingress:
            enabled: true
            {{- if $.Values.ingressClassName }}
            className: {{$.Values.ingressClassName}}
            {{- end }}
            hosts:
              - host: {{ printf "%s-%s.%s" $.Values.beamline $value.name $.Values.epik8namespace }}
                paths:
                  - path: /
                    pathType: Prefix
          {{- end}}
          {{- if $value.auto_security }}
          securityContext:
            {{- if or $.Values.openshift $value.privileged }}
            privileged: true
            {{- end }}
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            {{- end }}
          {{- if $.Values.epicsConfiguration.name }}
          epicsConfiguration:
            name: {{ $.Values.epicsConfiguration.name | quote}}
            gateway: {{ $.Values.epicsConfiguration.services.gateway.name }}.{{ $.Values.namespace }}
          {{- end }}
          {{- if $.Values.backend }}
          {{- if and $.Values.backend.mongo $value.mongodb}}
          mongo:
            host: {{ $.Values.backend.mongo.host}}.{{ $.Values.backend.namespace}}
            database: {{$value.mongodb}}
            port: {{ $.Values.backend.mongo.port}}
          {{- end }}
          {{- if $.Values.backend.elasticsearch}}
          elasticsearch:
            network:
              host: $.Values.backend.elasticsearch.host.{{ $.Values.backend.namespace}}
              port: {{ $.Values.backend.elasticsearch.port}}
          {{- end }}
          {{- if $.Values.backend.kafka}}
          kafka:
              host: $.Values.backend.kafka.host.{{ $.Values.backend.namespace}}
              port: {{ $.Values.backend.kafka.port}}
          {{- end }}
          {{- end }}



          

      parameters:
        - name: beamline
          value: {{ $.Values.beamline | quote }}
       
        {{- if $value.loadbalancer }}
        - name: service.type
          value: "LoadBalancer"
        - name: service.loadBalancerIP
          value: {{$value.loadbalancer}}
        {{- end }}
        {{- if $value.nodePort }}
        - name: service.type
          value: "NodePort"
        - name: service.nodePort
          value: "{{$value.nodePort}}"
        {{- end }}
        {{- if not $value.gitRepoConfig }}
        ## use defaults
        - name: gitRepoConfig.url
          value: {{$.Values.giturl}}
        - name: gitRepoConfig.path
          value: config/services/{{$value.name}}
        - name: gitRepoConfig.branch
          value: main
        {{- if $value.exec }}
        - name: gitRepoConfig.exec
          value: {{$value.exec}}
        {{- end }}  
        {{- end}}
        {{- if $value.mysql }}
        - name: mysql.host
          value: {{$value.mysql.host}}
        {{- end }}
    
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: {{ $.Values.namespace | quote }}
  syncPolicy:
    automated:
      prune: true
      selfHeal: true

## END {{$key}} {{$value.name}}
---
{{- end }}
